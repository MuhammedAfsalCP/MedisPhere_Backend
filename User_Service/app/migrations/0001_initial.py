# Generated by Django 4.2.7 on 2025-03-05 05:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('mobile_number', models.CharField(max_length=10, unique=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profilepic')),
                ('medical_report', models.ImageField(blank=True, default=None, null=True, upload_to='medicalreport')),
                ('first_name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('Select', 'Select'), ('Male', 'Male'), ('Female', 'Female')], default='Select', max_length=6)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in centimeters', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kilograms', max_digits=5, null=True)),
                ('blood_group', models.CharField(choices=[('Select', 'Select'), ('A+', 'A Pos'), ('A-', 'A Neg'), ('B+', 'B Pos'), ('B-', 'B Neg'), ('AB+', 'Ab Pos'), ('AB-', 'Ab Neg'), ('O+', 'O Pos'), ('O-', 'O Neg')], default='Select', max_length=6)),
                ('department', models.CharField(blank=True, choices=[('Select', 'Select'), ('Cardiology', 'Cardiology'), ('Neurology', 'Neurology'), ('Orthopedics', 'Orthopedics'), ('Pediatrics', 'Pediatrics'), ('Oncology', 'Oncology'), ('Dermatology', 'Dermatology'), ('Gynecology', 'Gynecology'), ('ENT', 'ENT')], help_text="Select the doctor's department", max_length=20, null=True)),
                ('years_of_experiance', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('license_number', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('license_photo', models.ImageField(blank=True, default=None, null=True, upload_to='licensephoto')),
                ('consultation_fee', models.IntegerField(blank=True, default=None, null=True)),
                ('upi_id', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_doctor', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DoctorAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of availability')),
                ('slot', models.CharField(choices=[('09:00', '09:00-10:00'), ('10:00', '10:00-11:00'), ('11:00', '11:00-12:00'), ('12:00', '12:00-1:00'), ('1:00', '1:00-2:00'), ('2:00', '2:00-3:00'), ('3:00', '3:00-4:00'), ('4:00', '4:00-5:00'), ('5:00', '5:00-6:00'), ('6:00', '6:00-7:00'), ('7:00', '7:00-8:00'), ('8:00', '8:00-9:00')], help_text='Select the available time slot (each slot is one hour)', max_length=5)),
                ('is_available', models.BooleanField(default=True, help_text='Indicates if the doctor is available during this slot')),
                ('doctor', models.ForeignKey(limit_choices_to={'is_doctor': True}, on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, limit_choices_to={'is_doctor': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date', 'slot'],
                'unique_together': {('doctor', 'date', 'slot')},
            },
        ),
    ]
